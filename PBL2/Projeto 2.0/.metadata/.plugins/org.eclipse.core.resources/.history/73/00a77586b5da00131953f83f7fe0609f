package br.uefs.ecomp.samu.facede;

import br.uefs.ecomp.samu.model.Ambulancia;
import br.uefs.ecomp.samu.model.Atendente;
import br.uefs.ecomp.samu.model.Cidadao;
import br.uefs.ecomp.samu.model.Ocorrencia;
import br.uefs.ecomp.samu.model.exception.AmbulanciasInsifucienteException;
import br.uefs.ecomp.samu.model.exception.AtendenteIndisponivelException;
import br.uefs.ecomp.samu.model.exception.CadastroRepetidoException;
import br.uefs.ecomp.samu.model.exception.CapacidadeMaximaException;
import br.uefs.ecomp.samu.model.exception.CidadaoNaoEncontradoException;
import br.uefs.ecomp.samu.model.exception.OcorrenciaNaoEncontradaException;
import br.uefs.ecomp.samu.model.exception.QuantidadeDiferenteAmbulanciasException;
import br.uefs.ecomp.samu.util.Fila;
import br.uefs.ecomp.samu.util.Iterador;
import br.uefs.ecomp.samu.util.ListaEncadeada;
import br.uefs.ecomp.samu.util.Pilha;

public class SamuController {
	//lembrar de criar uma maneira para o ID ser gerado automatico, se eu esqueci alguma coisa ou vc n conseguir fazer algo me proucure!
	private ListaEncadeada listaCidadoes;
	private ListaEncadeada listaAmbulancias;
	private ListaEncadeada listaAtendentes;
	private Pilha pilhaAmbulancias;
	private Fila filaAtendentes;
	private int idOcorrencias;
	private ListaEncadeada listaOcorrencias;
	/*criar uma lista pra ambulancias cadastradas, atendentes cadastrados,  cidadaos cadastrados
	 * criar uma pilha para ambulancias...quando for atender0 uma nova ocorrencia a ambulancia sai da pilha pelo metodo remover topo
	 * criar uma fila para atendentes, quando um cadastrar um ocorrente o atendente sai desta fila...quando a ocorrencia for atendida
	 * o atendente sai da ocorrencia e volta para o final da fila*/
	public SamuController(){
		
		listaCidadoes=new ListaEncadeada();
		listaAmbulancias= new ListaEncadeada();
		listaAtendentes= new ListaEncadeada();
		pilhaAmbulancias= new Pilha();
		filaAtendentes= new Fila();
		idOcorrencias=1;
		listaOcorrencias= new ListaEncadeada();
	}
	
	
	//se tiver cadastro repetido throw new CadastroRepetidoException(); se nao lançar excessão cadastrar o atendente na lista de cidadaos
	public Cidadao cadastrarCidadao(String cpf, String nome, String endereco) throws CadastroRepetidoException {
		
		Object aux;
		Cidadao c= new Cidadao(cpf,nome,endereco);
		Iterador it= listaCidadoes.iterador();
		
		while(it.temProximo()){
		    aux= it.proximo();
		    if(c.equals(aux)){
			    throw new CadastroRepetidoException(" ");
		    
		    }
			
		}
		
		listaCidadoes.insereFinal(c);
		return c;
	}
	//ultimo caso vc passa tdos os cidadaos para um vetor do tamanho da lista de cidadaos e usa  nomevetor.sort, depois volta os elementos pra uma lista auxiliar e retorna o iterador dela0
	public Iterador listarCidadaos() {
		
	}
	
	//proucura o cidadao dentro da lista de cidadao pelo cpf passado por parametro...caso encontre retorna cidadao.getDivida caso nao ache o cidadao lança excessão
	public double consultarDivida(String cpfCidadao) throws CidadaoNaoEncontradoException{
		
		Cidadao aux=buscaCidadao(cpfCidadao);
		if(aux == null){
			throw new CidadaoNaoEncontradoException("");
		}
		return aux.getDividaSamu();
	}
	//proucura o cidadao, setDivida(getDivida-valor) ou cria um metodo em cidadao pagarDivida(valor), caso nao encontre o cidadao retorna exception
	public void pagarDivida(String cpfCidadao, double valor) throws CidadaoNaoEncontradoException {
		
		Cidadao aux=buscaCidadao(cpfCidadao);
		
		if(aux == null){
			throw new CidadaoNaoEncontradoException("");
		}
		
		aux.setDividaSamu();
	}
	//caso a lista de atendente tenha 5 pessoas labnca capacidade maxima, caso ja tenha o atendente no sistema lança cadastro repetido, se nao lancar nenhuma das excessoes cadastra o atendente na lista e na fila de atendentes.0
	public Atendente cadastrarAtendente(String cpf, String nome, String endereco, double salario) 
            throws CadastroRepetidoException, CapacidadeMaximaException{
		
		Object aux;
		Atendente at= new Atendente(cpf,nome,endereco,salario);
		Iterador it= listaAtendentes.iterador();
		if(listaAtendentes.tamanho() == 5){
			throw new CapacidadeMaximaException("");
		}
		while(it.temProximo()){
		    aux= it.proximo();
		    if(at.equals(aux)){
			    throw new CadastroRepetidoException(" ");
		    
		    }
			
		}
		listaAtendentes.insereFinal(at);
		filaAtendentes.insereFinal(at);
		return at;
	}
	//mesmsa  coisa que cidadaos
	 public Iterador listarAtendentes() {
		 
	 }
	 //passa eleentos da fila de atendentes para uma lista auxiliar e retorna o seu iterador, nao lembro se vai inserindo na lista pelo inicio ou pelo final...acho q é final, mas faz o teste0
	 public Iterador listarAtendentesDisponiveis() {
		 return filaAtendentes.iterador();
	 }
	//se a lista de abulancia tiver 10 zambulancias lança capacidade maxima, se ja houver ambulancia com tal placa lanca cadastro repetido, se nao cair em exceção você cadastra na pilha de ambulancias e na lista de ambulancias
	 public Ambulancia cadastrarAmbulancia(String placa) throws CadastroRepetidoException, CapacidadeMaximaException{
		 
		 
		 Object aux;
			
		 Ambulancia a= new Ambulancia(placa);
			
		 Iterador it= listaAmbulancias.iterador();
			if(listaAmbulancias.tamanho()== 10){
				throw new CapacidadeMaximaException("");
			}
			while(it.temProximo()){
			    aux= it.proximo();
			    if(a.equals(aux)){
				    throw new CadastroRepetidoException(" ");
			    
			    }
				
			}
			listaAmbulancias.insereFinal(a);
			pilhaAmbulancias.insereTopo(a);
			
			return a;
	 }
	 //passa as ambulancias da pilha pra uma lista auxiliar e retorna o iterador da lista auxiliar
	 public Iterador listarAmbulanciasDisponiveis() {
		 return pilhaAmbulancias.iterador();
	 }
	 //mesma coisa que listarAtendentes
	 public Iterador listarAmbulancias() {
		 
	 }
	 
	 //cria id automatico, que será atribuido ao cidadao cujo cpf é passado, este cidadao tambem recebera +1 qtdOcorrencias, remove um atendente da fila e insere na ocorrencia.
	 //se nao achar cidadao lança exceção  e se a fila de atendentes estiver vazia == 0 lança atendenteINdisponivel o status é alterado pra Aberta
	 public int cadastrarOcorrencia(String cpf, int qtdAmbulancias) 
	            throws CidadaoNaoEncontradoException, AtendenteIndisponivelException{
		 
		 Ocorrencia o = new Ocorrencia(idOcorrencias,qtdAmbulancias);
		 Cidadao aux=buscaCidadao(cpf);
		 
		 if(aux==null)
		 {
			 throw new CidadaoNaoEncontradoException("");
		 }
		 
		 if(filaAtendentes.tamanho() == 0){
			 throw new AtendenteIndisponivelException("");
		 }
		 
		 o.setCidadao(aux);
		 o.setAtendente(filaAtendentes.removeInicio());
		 idOcorrencias++;
		 listaOcorrencias.insereFinal(o);
		 return o.getId();
		 
	 }
	 
	 //o atendente sai da ocorrencia e retorna para o final da fila de atendentes, a quantidade de atendimento desse stendente +1,o status
	 //da ocorrencia é alterado pra em atendimento
	 //se a pilha de ambulancia esta vazia labça QuantidadeDiferente..
	 //se o tamanho da pilha<tamanho ocorrencia.getQtdAmbulancias lança insifucienteException e se nao encontrar a ocorrencia naoEncontradaException
	 //caso nao entre nas exceções vc passa a ambulancia pro um for de 0 até cidadao.getQtdAmbulancias(cidadao de ocrrencia) dentro do for chama metodo de Inserção
	 public void atenderOcorrencia(int idOcorrencia) 
	            throws OcorrenciaNaoEncontradaException, AmbulanciasInsifucienteException,
	            QuantidadeDiferenteAmbulanciasException {
		 
		 int i;
		 Atendente aux;
		 Ocorrencia o = consultarOcorrencia(idOcorrencia);
		 if(pilhaAmbulancias.tamanho()<o.getQtdAmbulancias())
			 throw new AmbulanciasInsifucienteException("");
		 
		 for(i=0;i<o.getQtdAmbulancias();i++)
			 ((Ocorrencia)listaOcorrencias.recupera(idOcorrencia-1)).insereAmbulancia((Ambulancia)pilhaAmbulancias.removeTopo());
		 aux = o.getAtendente();
		 aux.setQtdAtendimentos(aux.getQtdAtendimentos()+1);
		 filaAtendentes.insereFinal(aux);
		 ((Ocorrencia)listaOcorrencias.recupera(idOcorrencia-1)).setStatus("Em Atendimento");
				 
	 }
	 
	 //Muda Status pra Finalizada, proucura o cidadao da lista que é igual ao cidadao de ocorrencia , muda a divida do cidadao da fila pra +10,faz um for de 0 ate ocorrencias.getQtdAmbulancias, insere na pilha de ambulancias o que for removido de dentro da lista de ambulancas em ocorrencia
	 //
	 public void finalizarOcorrencia(int idOcorrencia) throws OcorrenciaNaoEncontradaException {
		 
		 int i,posicao = 0;
		 Cidadao c,aux=null;
		 boolean achou = false;
		 Iterador it = listaCidadoes.iterador();
		 Ocorrencia o = consultarOcorrencia(idOcorrencia);
		 c = o.getCidadao();
		 
	
		 buscaCidadao(c.getCpf()).setDividaSamu(c.getDividaSamu()+10);
		 
		 for(i=0;i<o.getQtdAmbulancias();i++)
			 pilhaAmbulancias.insereTopo(((Ocorrencia)listaOcorrencias.recupera(idOcorrencia-1)).removeAmbulancia());
		 
		 		 		 
		 ((Ocorrencia)listaOcorrencias.recupera(idOcorrencia-1)).setStatus("Finalizada");
		
	 }
	 //cria uma lista auxiliar e faz um for do tamanho da lista de ocorrencias, se ocorrencia.recupera(i).estaAtiva() vc adicina a ocorrencia na lista auxiliar, depois do for retorna o iterador da auxiliar
	 public Iterador listarOcorrenciasAtivas() {
		 
		 Ocorrencia aux;
		 ListaEncadeada ativas= new ListaEncadeada();
		 Iterador it= listaOcorrencias.iterador();
		 
		 while(it.temProximo()){
			 
			 aux=(Ocorrencia) it.proximo();
			 
			 if(aux.estaAtiva())
				 ativas.insereFinal(aux);
				 
			 
		 }
		 
		 return ativas.iterador();
	 }
	 
	 
	 //retorna uma ocorrencia... vc faz um for do tamanho de ocorrencias e proucura idOcorrencia == ocorrencia.recupera(i).getId
	 public Ocorrencia consultarOcorrencia(int idOcorrencia) throws OcorrenciaNaoEncontradaException{
		 
		 Ocorrencia aux;
		 Iterador it=listaOcorrencias.iterador();
		
		 while(it.temProximo()){
			 aux=(Ocorrencia) it.proximo();
			 
			 if(aux.getId() ==idOcorrencia){
				 return aux;
			 }
		 }
		 
		 throw new OcorrenciaNaoEncontradaException("");
	 }
	 
	 private Cidadao buscaCidadao(String cpf){
		 Cidadao aux=null;
		 boolean achou=false;
		 
		 Iterador it=listaCidadoes.iterador();
		 
		 while(it.temProximo() && !achou){
			 
			 aux=(Cidadao) it.proximo();
			 
			 if(cpf.equals(aux.getCpf())){
				 achou=true;
			 }
			 
		 }
		 
		 return aux;
	 }
}
